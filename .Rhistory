install.packages("readxl")
install.packages("readxl")
# Drop rows with missing CustomerID
data <- data %>% filter(!is.na(CustomerID))
source("C:/Users/prane/OneDrive/Desktop/Think Pacific Internship/online_retail.r")
library(shiny); runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
runApp('online_retail.r')
gc()
gc()
gc()
gc()
gc()
gc()
gc()
runApp('online_retail.r')
runApp('online_retail.r')
runApp('shinyapp.r')
runApp('online_retail.r')
library(shiny); runApp('online_retail.r')
# Load necessary libraries
library(readxl)  # For reading Excel files
library(dplyr)   # For data manipulation
library(ggplot2) # For data visualization
library(cluster) # For clustering
library(factoextra) # For visualization of clustering
library(scales)  # For scaling data
library(shiny)  # For Deploying application
library(shinythemes)
# Load the data from the Excel file
data <- read_excel("onlineretail.xlsx")
head(data)
# Exploratory Data Analysis (EDA)
# Check for missing values
missing_values <- colSums(is.na(data))
print(missing_values)
# Drop rows with missing CustomerID
data <- data %>% filter(!is.na(CustomerID))
# Convert 'InvoiceDate' to datetime format and 'CustomerID' to character
data$InvoiceDate <- as.POSIXct(data$InvoiceDate, format="%Y-%m-%d %H:%M:%S")
data$CustomerID <- as.character(data$CustomerID)
# Create a new column for Total Amount Paid per transaction
data <- data %>% mutate(TotalAmtPaid = Quantity * UnitPrice)
# Remove rows with negative quantities
data <- data %>% filter(Quantity > 0)
# Basic statistics and distribution of numerical variables
print(summary(data))
ggplot(data, aes(x = Quantity)) +
geom_histogram(bins = 100, fill = "blue", color = "black") +
ggtitle("Quantity Distribution") +
theme_minimal()
# Identify categorical columns
categorical_cols <- c("InvoiceNo", "StockCode", "Description", "CustomerID", "Country")
data[categorical_cols] <- lapply(data[categorical_cols], as.factor)
# Recency, Frequency, Monetary (RFM) computation
# Compute Recency
date_max <- max(data$InvoiceDate)
recency <- data %>% group_by(CustomerID) %>%
summarize(Recency = as.numeric(difftime(date_max, max(InvoiceDate), units="days")))
# Compute Frequency
frequency <- data %>% group_by(CustomerID) %>%
summarize(Frequency = n())
# Compute Monetary
monetary <- data %>% group_by(CustomerID) %>%
summarize(Monetary = sum(TotalAmtPaid))
# Merge RFM metrics
rfm_table <- recency %>%
inner_join(frequency, by="CustomerID") %>%
inner_join(monetary, by="CustomerID")
# Remove outliers using IQR
for (col in c("Recency", "Frequency", "Monetary")) {
Q1 <- quantile(rfm_table[[col]], 0.25)
Q3 <- quantile(rfm_table[[col]], 0.75)
IQR <- Q3 - Q1
rfm_table <- rfm_table %>% filter(
rfm_table[[col]] >= (Q1 - 1.5 * IQR) &
rfm_table[[col]] <= (Q3 + 1.5 * IQR))
}
# Scale RFM data
rfm_scaled <- as.data.frame(scale(rfm_table[, c("Recency", "Frequency", "Monetary")])) # nolint
# K-Means Clustering
# Determine optimal number of clusters using the elbow method
wss <- sapply(1:10, function(k) {
kmeans(rfm_scaled, centers = k, nstart = 20)$tot.withinss
})
plot(1:10, wss, type="b", pch=19, frame=FALSE,
xlab="Number of Clusters", ylab="Total Within-Cluster Sum of Squares",
main="Elbow Method for Optimal Clusters")
# Based on the elbow plot, assume optimal clusters = 3
set.seed(42)
kmeans_model <- kmeans(rfm_scaled, centers = 3, nstart = 20)
rfm_table$Cluster <- as.factor(kmeans_model$cluster)
# Visualize Clusters
fviz_cluster(kmeans_model, data = rfm_scaled, geom = "point")
# Explore RFM metrics by cluster
print(rfm_table %>% group_by(Cluster) %>% summarize(
Recency = mean(Recency),
Frequency = mean(Frequency),
Monetary = mean(Monetary)
))
# Deploying the Software
# Best option: Deploy the clustering solution using R Shiny for interactive web applications
# Update Shiny app to use data inputs directly
# Extract unique values for dropdown menus
#
View(data)
